name: Build Mac App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [closed]
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
   build:
     runs-on: macos-latest
    
     steps:

     - uses: actions/checkout@v3
       with:
         fetch-depth: 0  # Fetch all history for tags
    
     - name: Set up Python

       uses: actions/setup-python@v4
       with:
         python-version: '3.9'
    
     - name: Install dependencies
       run: |
         python -m pip install --upgrade pip
         pip install pyinstaller
         pip install -r requirements.txt
    
     - name: Create Release (on push to main)
       if: github.event_name == 'push' && github.ref == 'refs/heads/main'
       id: create_release
       run: |
         # Get the latest version tag (format: v1.2.3)
         git fetch --tags
         LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
         
         if [ -z "$LATEST_TAG" ]; then
           # No existing tag, start with v0.1.0
           NEW_TAG="v0.1.0"
         else
           # Extract version components
           MAJOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\1/')
           MINOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\2/')
           PATCH=$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\3/')
           
           # Increment minor version
           NEW_MINOR=$((MINOR + 1))
           NEW_TAG="v$MAJOR.$NEW_MINOR.0"
         fi
         
         echo "Creating new release with tag: $NEW_TAG"
         echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
         
         # Create a new tag
         git config --global user.name "GitHub Actions"
         git config --global user.email "actions@github.com"
         git tag $NEW_TAG
         git push origin $NEW_TAG
         
         # Create a new release using GitHub CLI
         gh release create $NEW_TAG --title "Release $NEW_TAG" --notes "Automated release $NEW_TAG"
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
     - name: Build Mac App
       run: |
         # Find the spec file
         find . -name "*.spec"
         # Use the correct path to the spec file
         pyinstaller FrameGifTool.spec
         cd dist
         zip -r FrameGifTool-Mac.zip FrameGifTool.app
         echo "ZIP_PATH=$(pwd)/FrameGifTool-Mac.zip" >> $GITHUB_ENV
         cd ..
     
     - name: Upload to Release (on push to main)
       if: github.event_name == 'push' && github.ref == 'refs/heads/main'
       run: |
         # Upload the asset to the release
         gh release upload ${{ env.NEW_TAG }} ${{ env.ZIP_PATH }}
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
     - name: Upload to Release (on release created)
       if: github.event_name == 'release'
       run: |
         # Upload the asset to the release
         gh release upload ${{ github.event.release.tag_name }} ${{ env.ZIP_PATH }}
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
